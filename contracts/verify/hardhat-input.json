{
  "language": "Solidity",
  "sources": {
    "contracts/SpecificBet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract SpecificBet is Ownable, ReentrancyGuard {\n    struct Prediction {\n        uint256 id;\n        uint256 gameId;\n        string description;\n        uint256 deadline;\n        bool isResolved;\n        bool outcome;\n        uint256 totalStake;\n        uint256 odds;\n    }\n\n    struct UserBet {\n        address bettor;\n        uint256 amount;\n        bool predicted;\n    }\n\n    mapping(uint256 => Prediction) public predictions;\n    mapping(uint256 => UserBet[]) public bets;\n    mapping(address => mapping(uint256 => bool)) public hasBet;\n\n    uint256 public constant MIN_BET = 1 ether;\n    uint256 public predictionCount;\n\n    event PredictionCreated(uint256 indexed predictionId, uint256 indexed gameId, string description, uint256 odds);\n    event BetPlaced(uint256 indexed predictionId, address indexed bettor, uint256 amount, bool prediction);\n    event PredictionResolved(uint256 indexed predictionId, bool outcome);\n    event WinningsPaid(uint256 indexed predictionId, address indexed winner, uint256 amount);\n\n    constructor() {}\n\n    function createPrediction(\n        uint256 gameId,\n        string memory description,\n        uint256 deadline,\n        uint256 odds\n    ) external onlyOwner {\n        require(deadline > block.timestamp, \"Deadline must be in the future\");\n        require(odds > 0, \"Odds must be positive\");\n        \n        predictionCount++;\n        predictions[predictionCount] = Prediction({\n            id: predictionCount,\n            gameId: gameId,\n            description: description,\n            deadline: deadline,\n            isResolved: false,\n            outcome: false,\n            totalStake: 0,\n            odds: odds\n        });\n\n        emit PredictionCreated(predictionCount, gameId, description, odds);\n    }\n\n    function placeBet(uint256 predictionId, bool prediction) external payable nonReentrant {\n        require(msg.value >= MIN_BET, \"Bet amount too low\");\n        Prediction storage pred = predictions[predictionId];\n        require(!pred.isResolved, \"Prediction already resolved\");\n        require(block.timestamp < pred.deadline, \"Deadline passed\");\n        require(!hasBet[msg.sender][predictionId], \"Already bet on this prediction\");\n\n        pred.totalStake += msg.value;\n\n        bets[predictionId].push(UserBet({\n            bettor: msg.sender,\n            amount: msg.value,\n            predicted: prediction\n        }));\n\n        hasBet[msg.sender][predictionId] = true;\n\n        emit BetPlaced(predictionId, msg.sender, msg.value, prediction);\n    }\n\n    function resolvePrediction(uint256 predictionId, bool outcome) external onlyOwner {\n        Prediction storage pred = predictions[predictionId];\n        require(!pred.isResolved, \"Prediction already resolved\");\n        require(block.timestamp >= pred.deadline, \"Cannot resolve before deadline\");\n\n        pred.isResolved = true;\n        pred.outcome = outcome;\n\n        for (uint i = 0; i < bets[predictionId].length; i++) {\n            UserBet memory bet = bets[predictionId][i];\n            if (bet.predicted == outcome) {\n                uint256 winnings = (bet.amount * pred.odds) / 100;\n                payable(bet.bettor).transfer(winnings);\n                emit WinningsPaid(predictionId, bet.bettor, winnings);\n            }\n        }\n\n        emit PredictionResolved(predictionId, outcome);\n    }\n\n    function getPrediction(uint256 predictionId) external view returns (Prediction memory) {\n        return predictions[predictionId];\n    }\n\n    function getBets(uint256 predictionId) external view returns (UserBet[] memory) {\n        return bets[predictionId];\n    }\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ReentrancyGuard {\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    modifier nonReentrant() {\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        _status = _ENTERED;\n\n        _;\n\n        _status = _NOT_ENTERED;\n    }\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": ["abi", "evm.bytecode", "evm.deployedBytecode", "evm.methodIdentifiers", "metadata"],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "evmVersion": "paris",
    "libraries": {}
  }
}
